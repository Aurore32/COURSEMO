FROM docker.io/nvidia/cuda:12.4.0-devel-ubuntu22.04 AS base

# Set at very top of Dockerfile
ENV TORCH_CUDA_ARCH_LIST="8.0;8.6+PTX"

FROM base AS tesseract

RUN echo 'quack'

ARG TESSERACT_VERSION=5.5.0
ARG TESSERACT_URL="https://api.github.com/repos/tesseract-ocr/tesseract/tarball/$TESSERACT_VERSION"

# Install basic tools and Python dependencies
RUN apt-get update && \
    DEBIAN_FRONTEND=noninteractive \
    TZ=Europe/London \
    apt-get install -y tzdata

RUN apt-get update && apt-get install --no-install-recommends --yes \
    apt-transport-https \
    asciidoc \
    automake \
    bash \
    ca-certificates \
    curl \
    docbook-xsl \
    g++ \
    git \
    libleptonica-dev \
    libtool \
    libicu-dev \
    libpango1.0-dev \   
    libcairo2-dev \
    libgl1 \          
    libglib2.0-0 \    
    libsm6 \          
    libxext6 \         
    libxrender1 \      
    make \
    pkg-config \
    wget \
    xsltproc \
    && rm -rf /var/lib/apt/lists/*
# Install system build dependencies and CUDA support
RUN apt-get update && apt-get install -y \
    # Python development headers
    # Compilation tools
    build-essential \
    gcc \
    g++ \
    make \  
    libgl1 \
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender1 \
    # Headers for linking
    libicu-dev \
    libcairo2-dev \
    libpango1.0-dev \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /src

RUN wget -qO tesseract.tar.gz $TESSERACT_URL && \
    tar -xzf tesseract.tar.gz && \
    rm tesseract.tar.gz && \
    mv tesseract-* tesseract

WORKDIR /src/tesseract

RUN ./autogen.sh && \
    ./configure && \
    make && \
    make install && \
    ldconfig

# Go to default traineddata directory
WORKDIR /usr/local/share/tessdata/

# Copy language script and list to image
COPY get-languages.sh .
COPY languages.txt .

# Make script executable
RUN chmod +x ./get-languages.sh
# Download traineddata languages
RUN ./get-languages.sh
RUN apt-get update


ENV LD_LIBRARY_PATH=/usr/local/cuda-12.4/lib64:$LD_LIBRARY_PATH \
    CUDA_HOME=/usr/local/cuda-12.4 \
    PATH=/usr/local/cuda-12.4/bin:$PATH

FROM docker.io/lukemathwalker/cargo-chef:latest-rust-1.82 AS chef
WORKDIR /usr/src

ARG CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse

FROM chef as planner
COPY Cargo.toml Cargo.toml
COPY rust-toolchain.toml rust-toolchain.toml
COPY proto proto
COPY router router
COPY launcher launcher
RUN cargo chef prepare --recipe-path recipe.json

FROM chef AS builder
# Add this check immediately after FROM
RUN rustc --version && cargo --version

ARG GIT_SHA
ARG DOCKER_LABEL

RUN PROTOC_ZIP=protoc-21.12-linux-x86_64.zip && \
    curl -OL https://github.com/protocolbuffers/protobuf/releases/download/v21.12/$PROTOC_ZIP && \
    unzip -o $PROTOC_ZIP -d /usr/local bin/protoc && \
    unzip -o $PROTOC_ZIP -d /usr/local 'include/*' && \
    rm -f $PROTOC_ZIP

COPY --from=planner /usr/src/recipe.json recipe.json
RUN cargo chef cook --release --recipe-path recipe.json

COPY Cargo.toml Cargo.toml
COPY rust-toolchain.toml rust-toolchain.toml
COPY proto proto
COPY router router
COPY launcher launcher
RUN cargo build --release

# Python builder
# Adapted from: https://github.com/pytorch/pytorch/blob/master/Dockerfile
FROM docker.io/nvidia/cuda:12.4.0-devel-ubuntu22.04 as pytorch-install

# Install system dependencies
RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y \
    python3.10 \
    python3.10-dev \
    python3-pip \
    python3-wheel \
    build-essential \
    ninja-build \
    cmake \
    libssl-dev \
    git \ 
    && rm -rf /var/lib/apt/lists/*
    
# Configure Python 3.10 as default
RUN update-alternatives --install /usr/bin/python python /usr/bin/python3.10 1

# Install PyTorch with CUDA 12.1 compatibility (latest stable for direct pip install)
RUN pip install --no-cache-dir \
    torch==2.6.0 \
    torchvision==0.21.0 \
    torchaudio==2.6.0 \
    --index-url https://download.pytorch.org/whl/cu124

# -----------------------------------------------------------
# Kernel Builds (Modified for System Python)
# -----------------------------------------------------------
FROM pytorch-install as kernel-builder

ARG MAX_JOBS=2

RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    ninja-build cmake \
    && rm -rf /var/lib/apt/lists/*

# Build Flash Attention CUDA kernels
FROM kernel-builder as flash-att-builder
WORKDIR /usr/src
RUN which git && git --version
COPY server/Makefile-flash-att Makefile
RUN make build-flash-attention && \
    make install-flash-attention  
        
# Build Flash Attention v2 CUDA kernels
FROM kernel-builder as flash-att-v2-builder
WORKDIR /usr/src
RUN rm -rf flash-attention-v2
COPY server/Makefile-flash-att-v2 Makefile
RUN make build-flash-attention-v2-cuda && \
    make install-flash-attention-v2-cuda

# Build Transformers exllama kernels
FROM kernel-builder as exllama-kernels-builder
RUN echo "Building with CUDA arches: ${TORCH_CUDA_ARCH_LIST}" && \
    python -c "import os; print('ENV:', os.environ.get('TORCH_CUDA_ARCH_LIST'))"
WORKDIR /usr/src
COPY server/exllama_kernels/ .
# Explicit environment export
ENV TORCH_CUDA_ARCH_LIST=${TORCH_CUDA_ARCH_LIST}
RUN TORCH_CUDA_ARCH_LIST="8.0;8.6+PTX" python setup.py build && \
    python setup.py install

# Build Transformers exllama kernels
FROM kernel-builder as exllamav2-kernels-builder
RUN echo "Building with CUDA arches: ${TORCH_CUDA_ARCH_LIST}" && \
    python -c "import os; print('ENV:', os.environ.get('TORCH_CUDA_ARCH_LIST'))"
ENV TORCH_CUDA_ARCH_LIST=${TORCH_CUDA_ARCH_LIST}

WORKDIR /usr/src
COPY server/exllamav2_kernels/ .
RUN TORCH_CUDA_ARCH_LIST="8.0;8.6+PTX" python setup.py build && \
    python setup.py install

# Build Transformers awq kernels
FROM kernel-builder as awq-kernels-builder
RUN echo "Building with CUDA arches: ${TORCH_CUDA_ARCH_LIST}" && \
    python -c "import os; print('ENV:', os.environ.get('TORCH_CUDA_ARCH_LIST'))"
ENV TORCH_CUDA_ARCH_LIST=${TORCH_CUDA_ARCH_LIST}

WORKDIR /usr/src
COPY server/Makefile-awq Makefile
RUN TORCH_CUDA_ARCH_LIST="8.0;8.6+PTX" make build-awq && \
    make install-awq


# Build Transformers CUDA kernels
FROM kernel-builder as custom-kernels-builder
WORKDIR /usr/src
COPY server/custom_kernels/ .
# Build specific version of transformers
RUN python setup.py build && \
    python setup.py install

# Build vllm CUDA kernels
FROM kernel-builder as vllm-builder
WORKDIR /usr/src
RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    wget \
    && rm -rf /var/lib/apt/lists/*
RUN DEBIAN_FRONTEND=noninteractive apt purge -y --auto-remove cmake
RUN wget 'https://github.com/Kitware/CMake/releases/download/v3.30.0/cmake-3.30.0-linux-x86_64.tar.gz'
RUN tar xzvf 'cmake-3.30.0-linux-x86_64.tar.gz'
RUN ln -s "$(pwd)/cmake-3.30.0-linux-x86_64/bin/cmake" /usr/local/bin/cmake
ENV TORCH_CUDA_ARCH_LIST="7.0 7.5 8.0 8.6 8.9 9.0+PTX"
RUN echo "Building with CUDA arches: ${TORCH_CUDA_ARCH_LIST}" && \
    python -c "import os; print('ENV:', os.environ.get('TORCH_CUDA_ARCH_LIST'))"

COPY server/Makefile-vllm Makefile
# Build specific version of vllm
RUN make build-vllm-cuda && \
    make install-vllm-cuda


# Build megablocks kernels
FROM kernel-builder as megablocks-kernels-builder
WORKDIR /usr/src
COPY server/Makefile-megablocks Makefile
ENV TORCH_CUDA_ARCH_LIST="8.0;8.6+PTX"
RUN make build-megablocks && \
    make install-megablocks


# Build punica CUDA kernels
FROM kernel-builder as punica-builder
WORKDIR /usr/src
COPY server/punica_kernels/ .
# Build specific version of punica
ENV TORCH_CUDA_ARCH_LIST="8.0;8.6+PTX"
RUN python setup.py build && \
    python setup.py install

# Build eetq kernels
FROM kernel-builder as eetq-kernels-builder
WORKDIR /usr/src
COPY server/Makefile-eetq Makefile
# Build specific version of transformers
ENV TORCH_CUDA_ARCH_LIST=${TORCH_CUDA_ARCH_LIST}

RUN TORCH_CUDA_ARCH_LIST="8.0;8.6+PTX" make build-eetq && \
    make install-eetq


# LoRAX base image
FROM docker.io/nvidia/cuda:12.4.0-devel-ubuntu22.04 AS lorax-base

# Conda env
ENV PATH=/opt/conda/bin:$PATH \
    CONDA_PREFIX=/opt/conda

# LoRAX base env
ENV HUGGINGFACE_HUB_CACHE=/data \
    HF_HUB_ENABLE_HF_TRANSFER=1 \
    PORT=80

WORKDIR /usr/src

RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    libssl-dev \
    ca-certificates \
    make \
    sudo \
    && rm -rf /var/lib/apt/lists/*

# Install server
COPY proto proto
COPY server server
COPY server/Makefile server/Makefile

RUN cd server && \
    make gen-server && \
    pip install --no-cache-dir -r requirements.txt && \
    pip install ".[bnb, accelerate, quantize, peft, outlines]" --no-cache-dir

# Install router
COPY --from=builder /usr/src/target/release/lorax-router /usr/local/bin/lorax-router
# Install launcher
COPY --from=builder /usr/src/target/release/lorax-launcher /usr/local/bin/lorax-launcher

RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    build-essential \
    g++ \
    && rm -rf /var/lib/apt/lists/*


# Final image
FROM docker.io/nvidia/cuda:12.4.0-devel-ubuntu22.04

# In your final image stage
FROM nvidia/cuda:12.4.0-base-ubuntu22.04

# Copy Python environment and kernels
COPY --from=pytorch-install /usr/local/lib/python3.10/dist-packages /usr/local/lib/python3.10/dist-packages
COPY --from=pytorch-install /usr/bin/python3.10 /usr/bin/python3.10

# Copy kernel installations from each builder
COPY --from=flash-att-builder /usr/local/lib/python3.10/dist-packages/ /usr/local/lib/python3.10/dist-packages/
COPY --from=flash-att-v2-builder /usr/local/lib/python3.10/dist-packages/ /usr/local/lib/python3.10/dist-packages/
COPY --from=exllama-kernels-builder /usr/local/lib/python3.10/dist-packages/ /usr/local/lib/python3.10/dist-packages/
COPY --from=exllamav2-kernels-builder /usr/local/lib/python3.10/dist-packages/ /usr/local/lib/python3.10/dist-packages/
COPY --from=awq-kernels-builder /usr/local/lib/python3.10/dist-packages/ /usr/local/lib/python3.10/dist-packages/
COPY --from=vllm-builder /usr/local/lib/python3.10/dist-packages/ /usr/local/lib/python3.10/dist-packages/
COPY --from=megablocks-kernels-builder /usr/local/lib/python3.10/dist-packages/ /usr/local/lib/python3.10/dist-packages/
COPY --from=punica-builder /usr/local/lib/python3.10/dist-packages/ /usr/local/lib/python3.10/dist-packages/
COPY --from=eetq-kernels-builder /usr/local/lib/python3.10/dist-packages/ /usr/local/lib/python3.10/dist-packages/

# Copy shared libraries from CUDA builds
COPY --from=exllama-kernels-builder /usr/local/cuda/lib64/ /usr/local/cuda/lib64/
COPY --from=vllm-builder /usr/local/cuda/lib64/ /usr/local/cuda/lib64/

# Copy Tesseract artifacts
COPY --from=tesseract /usr/local/ /usr/local/
COPY --from=tesseract /usr/share/tesseract-ocr/ /usr/share/tesseract-ocr/

# Copy LoRAX components
COPY --from=builder /usr/src/target/release/lorax-router /usr/local/bin/
COPY --from=builder /usr/src/target/release/lorax-launcher /usr/local/bin/


# Install Python requirements
RUN pip install --no-cache-dir \
    pytesseract \
    lorax-client \
    Pillow==10.3.0 \
    numpy==1.26.4

# Install final dependencies
RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y \
    python3.10-dev \
    libopenblas-dev \
    libgomp1 \
    libtesseract5 \
    libleptonica-dev \
    libgl1-mesa-glx \   
    libxi6 \
    libxfixes3 \
    && apt-get purge -y --auto-remove build-essential \
    && rm -rf /var/lib/apt/lists/*

# Environment setup
ENV PYTHONPATH=/usr/local/lib/python3.10/dist-packages \
    PYTHONUSERBASE=/usr/local \
    PATH=/usr/local/bin:$PATH
ENV LD_LIBRARY_PATH=/usr/local/cuda/lib64:/usr/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH \
    CUDA_HOME=/usr/local/cuda \
    TESSDATA_PREFIX=/usr/local/share/tessdata
# Verification
RUN tesseract --version && \
    python3.10 -c "import torch; print(f'PyTorch {torch.__version__}, CUDA: {torch.cuda.is_available()}')" && \
    ls -l /usr/local/share/tessdata/  # Verify traineddata files

    # In your final image stage
COPY verification.py .

# Verification command
RUN python3.10 verification.py && \
    python3.10 -c "import torch; print(f'CUDA Device: {torch.cuda.get_device_name(0)}')" && \
    tesseract --version
